@use "sass:math";

@function rem($size, $base: 16) {
  @return math.div($size, $base) + rem;
}

@function em($px, $current: 16) {
  $result: math.div($px, $current) + em;
  @return $result
}

@function percent($px, $from) {
  $result: math.div($px, $from) * 100%;
  @return $result
}

@mixin flex() {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

@mixin grid($min: 150px, $max: 1fr) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min, $max));
}

@mixin transition($property: all, $duration: .3s, $timing-function: linear) {
  transition: $property $duration $timing-function;
}

@mixin title($mb, $min-fz, $max-fz) {
  font-size: clamp($min-fz, 4vw, $max-fz);
  margin-bottom: $mb;
}

@mixin hover-scale($scale: 1.1, $duration: 0.3s, $timing-function: ease) {
  overflow: hidden;
  img {
    display: block;
    transition: transform $duration $timing-function;
    @media (hover: hover) {
      &:hover {
        transform: scale($scale);
      }
    }

  }
}

@mixin hover-underline($color: currentColor, $thickness: 2px, $duration: 0.3s, $timing-function: ease) {
  & {
    position: relative;
    &::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 0;
      height: $thickness;
      background-color: $color;
      transition: width $duration $timing-function;
    }
    @media (hover: hover) {
      &:hover::after {
        width: 70%;
      }
    }
  }
}

@mixin darkness($percent: 40%) {
   & {
     filter: brightness($percent);
     -webkit-filter: brightness($percent);
     -moz-filter: brightness($percent);
   }
}

@mixin hover-scale-effect($scale: 1.2, $duration: 0.3s, $timing-function: ease) {
  transition: transform $duration $timing-function;
  @media (hover: hover) {
    &:hover {
      transform: scale($scale);
    }
  }
}

@mixin hover-rotate-effect($angle: 45deg, $duration: 0.3s, $timing-function: ease) {
  transition: transform $duration $timing-function;

  @media (hover: hover) {
    &:hover {
      svg {
        transform: rotate($angle);
      }
    }
  }
}

@mixin hover-color($hover-color: #007bff, $duration: 0.3s, $timing-function: ease) {
  transition: color $duration $timing-function;
  @media (hover: hover) {
    &:hover {
      color: $hover-color;
    }
  }
}

@mixin shine-effect($width: 100px, $angle: 120deg, $color1: rgba(255, 255, 255, 0), $color2: rgba(255, 255, 255, 0.8), $duration: 3s) {
  position: relative;

  &:before {
    content: '';
    position: absolute;
    width: $width;
    height: 100%;
    background-image: linear-gradient(
                    $angle,
                    $color1 30%,
                    $color2,
                    $color1 70%
    );
    top: 0;
    left: -$width;
    animation: shine $duration infinite linear;
  }
}

@keyframes shine {
  0% { left: -100px; }
  20% { left: 100%; }
  100% { left: 100%; }
}

@mixin hover-effect($property: color, $value: #007bff, $duration: 0.3s, $timing-function: ease) {
  transition: $property $duration $timing-function;
  @media (hover: hover) {
    &:hover {
      #{$property}: $value;
    }
  }
}

@mixin hide-scrollbar() {
  -ms-overflow-style: none;
  scrollbar-width: none;
  -webkit-overflow-scrolling: touch;

  &::-webkit-scrollbar {
    display: none;
  }
}
